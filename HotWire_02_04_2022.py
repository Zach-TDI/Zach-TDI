# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Hotwire_V1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from time import sleep
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QMessageBox, QListWidget, QListWidgetItem, QLabel, QApplication, QDialog, QToolTip, QPushButton
from PyQt5.QtCore import Qt
import socket

##################################################################
# set up the UDP path and IP addresses
##################################################################
UDP_PORT = 8088
UDP_IP = "192.168.100.101"  # IP address for Server(RaspberryPi)
address = (UDP_IP, UDP_PORT)
UDP_IP2 = "192.168.100.50"  # IP address for client(Clear Core)
address2 = (UDP_IP2, UDP_PORT)

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # Internet, UDP

##################################################################
# NEED to Set the ip ADDRESS IN ORDER TO BIND
# sock.bind(address)

##################################################################
# Switch Case for level adjustment
##################################################################


class PythonSwitch:
    def position(self, height):
        default = "move home"
        return getattr(self, 'case_' + str(height), lambda: default)

##################################################################
# cases represent hights of the hotwire
##################################################################
    def case_0(self):
        msg = 'Position_0'
        print('moving to the home postion')
        sock.sendto(msg.encode("utf-8"), (address2))
        motion = "Moving To: " + msg
        return motion

    def case_1(self):
        msg = 'Position_1'
        print('moving to the home postion')
        sock.sendto(msg.encode("utf-8"), (address2))
        motion = "Moving To: " + msg
        return motion

    def case_2(self):
        msg = 'Position_2'
        sock.sendto(msg.encode("utf-8"), (address2))
        motion = "Moving To: " + msg
        return motion

    def case_3(self):
        msg = 'Position_3'
        sock.sendto(msg.encode("utf-8"), (address2))
        motion = "Moving To: " + msg
        return motion

    def case_4(self):
        msg = 'Position_4'
        sock.sendto(msg.encode("utf-8"), (address2))
        motion = "Moving To: " + msg
        return motion

    def case_5(self):
        msg = 'Position_5'
        sock.sendto(msg.encode("utf-8"), (address2))
        motion = "Moving To: " + msg
        return motion

    def case_6(self):
        msg = 'ESTOP State'
        sock.sendto(msg.encode("utf-8"), (address2))
        motion = "NOT MOVING Till RESET: " + msg
        return motion


##################################################################
# User selection of level via HMI
#################################################################


class Ui_HotWire(object):

    def setupUi(self, HotWire, X_Size, Y_Size, Xpos1, Xpos2, Xpos3, Ypos1, Ypos2, Ypos3):
        HotWire.setObjectName("HotWire")
        HotWire.resize(1024, 600)
        HotWire.setMaximumSize(QtCore.QSize(1024, 600))
        HotWire.setStyleSheet("background-color: rgb(0, 100, 150);")

#################################################################

        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)

        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(200, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(200, 250, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(200, 250, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(200, 250, 100))

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(
            ".jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)


#################################################################

        self.centralwidget = QtWidgets.QWidget(HotWire)
        self.centralwidget.setObjectName("centralwidget")

        self.Height1 = QtWidgets.QPushButton(self.centralwidget)
        self.Height1.setGeometry(QtCore.QRect(Xpos1, Ypos1, X_Size, Y_Size))
        self.Height1.setFont(font)
        self.Height1.setStyleSheet("background-color: rgb(200, 250, 100);")
        self.Height1.setDefault(True)
        self.Height1.setObjectName("Height1")

        self.Height2 = QtWidgets.QPushButton(self.centralwidget)
        self.Height2.setGeometry(QtCore.QRect(Xpos2, Ypos1, X_Size, Y_Size))
        self.Height2.setFont(font)
        self.Height2.setStyleSheet("background-color: rgb(200, 250, 100);")
        self.Height2.setObjectName("Height2")

        self.Height3 = QtWidgets.QPushButton(self.centralwidget)
        self.Height3.setGeometry(QtCore.QRect(Xpos3, Ypos1, X_Size, Y_Size))
        self.Height3.setFont(font)
        self.Height3.setStyleSheet("background-color: rgb(200, 250, 100);")
        self.Height3.setObjectName("Height3")

        self.Height4 = QtWidgets.QPushButton(self.centralwidget)
        self.Height4.setGeometry(QtCore.QRect(Xpos1, Ypos2, X_Size, Y_Size))
        self.Height4.setFont(font)
        self.Height4.setStyleSheet("background-color: rgb(200, 250, 100);")
        self.Height4.setCheckable(False)
        self.Height4.setObjectName("Height4")

        self.Height5 = QtWidgets.QPushButton(self.centralwidget)
        self.Height5.setGeometry(QtCore.QRect(Xpos3, Ypos2, X_Size, Y_Size))
        self.Height5.setPalette(palette)
        self.Height5.setFont(font)
        self.Height5.setStyleSheet("background-color: rgb(200,250 ,100);")
        self.Height5.setObjectName("Height5")

        iconbf = QtGui.QIcon()
        iconbf.addPixmap(QtGui.QPixmap(
            "C:/Users/zachc/OneDrive/Documents/FluxLogs/Tests/bullfrog-spas-icon.png"))

        self.Start = QtWidgets.QPushButton(self.centralwidget)
        self.Start.setGeometry(QtCore.QRect(Xpos1, Ypos3, X_Size, Y_Size))
        self.Start.setFont(font)
        self.Start.setIcon(iconbf)
        self.Start.setIconSize(QtCore.QSize(100, 100))
        self.Start.setAutoFillBackground(False)
        self.Start.setStyleSheet("background-color: rgb(25, 255, 10);")
        self.Start.setObjectName("Start")

        self.Stop = QtWidgets.QPushButton(self.centralwidget)
        self.Stop.setGeometry(QtCore.QRect(Xpos3, Ypos3, X_Size, Y_Size))
        self.Stop.setSizeIncrement(QtCore.QSize(1, 1))
        self.Stop.setFont(font)
        self.Stop.setAutoFillBackground(False)
        self.Stop.setStyleSheet("background-color: rgb(255, 25, 25);\n"
                                "text-decoration:")
        self.Stop.setObjectName("Stop")

        self.HigtDisp = QtWidgets.QLCDNumber(self.centralwidget)
        self.HigtDisp.setGeometry(QtCore.QRect(Xpos2, Ypos3, X_Size, Y_Size))
        self.HigtDisp.setStyleSheet("color: rgb(223, 231, 255);\n"
                                    "background-color: rgb(0, 0, 0);")
        self.HigtDisp.setDigitCount(1)
        self.HigtDisp.setProperty("value", 0.0)
        self.HigtDisp.setProperty("intValue", 0)
        self.HigtDisp.setObjectName("HigtDisp")

        self.Reset = QtWidgets.QPushButton(self.centralwidget)
        self.Reset.setGeometry(QtCore.QRect(Xpos2, Ypos2, X_Size, Y_Size))
        self.Reset.setFont(font)
        self.Reset.setStyleSheet("background-color: rgb(0, 50, 10);\n"
                                 "background-color: rgb(255, 255, 255);")

        iconRefresh = QtGui.QIcon()
        iconRefresh.addPixmap(QtGui.QPixmap(
            "C:/Users/zachc/OneDrive/Documents/FluxLogs/Tests/outline_refresh_black_24dp.png"))

        self.Reset.setIcon(iconRefresh)
        self.Reset.setIconSize(QtCore.QSize(150, 150))
        self.Reset.setObjectName("Reset")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(Xpos2, Ypos3-45, 251, 41))
        self.label.setStyleSheet("font: 75 22pt \"MS Shell Dlg 2\";\n"
                                 "color: rgb(255, 255, 255);")
        self.label.setObjectName("label")

        HotWire.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(HotWire)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 830, 21))
        self.menubar.setObjectName("menubar")
        HotWire.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(HotWire)
        self.statusbar.setObjectName("statusbar")
        HotWire.setStatusBar(self.statusbar)

        self.retranslateUi(HotWire)
        self.Height1.clicked.connect(lambda: self.btn(1))
        self.Height2.clicked.connect(lambda: self.btn(2))
        self.Height3.clicked.connect(lambda: self.btn(3))
        self.Height4.clicked.connect(lambda: self.btn(4))
        self.Height5.clicked.connect(lambda: self.btn(5))
        self.Reset.clicked.connect(lambda: self.btn(0))
        self.Start.clicked.connect(lambda: self.start())
        self.Stop.clicked.connect(lambda: self.stop())
        QtCore.QMetaObject.connectSlotsByName(HotWire)

    def retranslateUi(self, HotWire):
        _translate = QtCore.QCoreApplication.translate
        HotWire.setWindowTitle(_translate("HotWire", "MainWindow"))
        self.Height1.setText(_translate("HotWire", "Height 1"))
        self.Height1.setShortcut(_translate("HotWire", "Ctrl+1"))
        self.Height2.setText(_translate("HotWire", "Height 2"))
        self.Height2.setShortcut(_translate("HotWire", "Ctrl+2"))
        self.Height3.setText(_translate("HotWire", "Height 3"))
        self.Height3.setShortcut(_translate("HotWire", "Ctrl+3"))
        self.Height4.setText(_translate("HotWire", "Height 4"))
        self.Height4.setShortcut(_translate("HotWire", "Ctrl+4"))
        self.Height5.setText(_translate("HotWire", "Height 5"))
        self.Height5.setShortcut(_translate("HotWire", "Ctrl+5"))
        self.Start.setText(_translate("HotWire", "START"))
        self.Start.setShortcut(_translate("HotWire", "Ctrl+S"))
        self.Stop.setText(_translate("HotWire", "STOP"))
        self.Stop.setShortcut(_translate("HotWire", "Ctrl+T"))
        self.Reset.setText(_translate("HotWire", "Reset"))
        self.Reset.setShortcut(_translate("HotWire", "Ctrl+R"))
        self.label.setText(_translate("HotWire", "Current Set Hight"))

##################################################################
    def btn(self, btn):

        if btn < 6:
            msg = str(btn)
            self.HigtDisp.setProperty("value", float(btn)) and self.HigtDisp.setStyleSheet("color: rgb(255, 255, 255);\n"
                                                                                           "background-color: rgb(0, 0, 0);")
        wireLevel.position(btn)
        sock.sendto(msg.encode("utf-8"), (address2))
        self.show_popup(str(btn))

        if btn == 0:
            pass

        print('i made it here')

##################################################################

    def start(self):
        msg = "6"
        self.HigtDisp.setStyleSheet("color: rgb(0, 255, 0);\n"
                                    "background-color: rgb(0, 0, 0);")
        sock.sendto(msg.encode("utf-8"), (address2))

##################################################################
    def stop(self):
        msg = "7"
        self.HigtDisp.setStyleSheet("color: rgb(255, 0, 0);\n"
                                    "background-color: rgb(0, 0, 0);")
        sock.sendto(msg.encode("utf-8"), (address2))
        self.show_popup(msg)

    def show_popup(self, btn):
        data, addr = sock.recvfrom(1024)
        oldData = data.decode()
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Wait For Movement")
        msgbox.setText("Wainting for movement to Complete")
        msgbox.exec_()

    def show_Estop(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Emergency Stop Active")
        msgbox.setText("Emergency Stop Is active please reset")
        msgbox.exec_()

    def keyPressEvent(self, event):
        """Close application from escape key.
        """
        if event.key() == Qt.Key_Escape:
            self.close()

    def Faults(self, event):
        """Pop up window for faults.
        """
        if event.key() == Qt.Key_Escape:
            self.close()


if __name__ == "__main__":
    import sys
    wireLevel = PythonSwitch()
    app = QtWidgets.QApplication(sys.argv)
    HotWire = QtWidgets.QMainWindow()
    ui = Ui_HotWire()
    ui.setupUi(HotWire, 250, 150, 40, 400, 740, 20, 200, 400)
    HotWire.show()
sys.exit(app.exec_())
